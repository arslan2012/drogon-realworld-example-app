/**
 *
 *  ArticleFavorites.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "ArticleFavorites.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::realworld;

const std::string ArticleFavorites::Cols::_article_id = "article_id";
const std::string ArticleFavorites::Cols::_user_id = "user_id";
const std::vector<std::string> ArticleFavorites::primaryKeyName = {"article_id","user_id"};
const bool ArticleFavorites::hasPrimaryKey = true;
const std::string ArticleFavorites::tableName = "article_favorites";

const std::vector<typename ArticleFavorites::MetaData> ArticleFavorites::metaData_={
{"article_id","std::string","character varying",255,0,1,1},
{"user_id","std::string","character varying",255,0,1,1}
};
const std::string &ArticleFavorites::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
ArticleFavorites::ArticleFavorites(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["article_id"].isNull())
        {
            articleId_=std::make_shared<std::string>(r["article_id"].as<std::string>());
        }
        if(!r["user_id"].isNull())
        {
            userId_=std::make_shared<std::string>(r["user_id"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 2 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            articleId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            userId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

ArticleFavorites::ArticleFavorites(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            articleId_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            userId_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
}

ArticleFavorites::ArticleFavorites(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("article_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["article_id"].isNull())
        {
            articleId_=std::make_shared<std::string>(pJson["article_id"].asString());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<std::string>(pJson["user_id"].asString());
        }
    }
}

void ArticleFavorites::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            articleId_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            userId_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
}
                                                                    
void ArticleFavorites::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("article_id"))
    {
        if(!pJson["article_id"].isNull())
        {
            articleId_=std::make_shared<std::string>(pJson["article_id"].asString());
        }
    }
    if(pJson.isMember("user_id"))
    {
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<std::string>(pJson["user_id"].asString());
        }
    }
}

const std::string &ArticleFavorites::getValueOfArticleId() const noexcept
{
    const static std::string defaultValue = std::string();
    if(articleId_)
        return *articleId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ArticleFavorites::getArticleId() const noexcept
{
    return articleId_;
}
void ArticleFavorites::setArticleId(const std::string &pArticleId) noexcept
{
    articleId_ = std::make_shared<std::string>(pArticleId);
    dirtyFlag_[0] = true;
}
void ArticleFavorites::setArticleId(std::string &&pArticleId) noexcept
{
    articleId_ = std::make_shared<std::string>(std::move(pArticleId));
    dirtyFlag_[0] = true;
}



const std::string &ArticleFavorites::getValueOfUserId() const noexcept
{
    const static std::string defaultValue = std::string();
    if(userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ArticleFavorites::getUserId() const noexcept
{
    return userId_;
}
void ArticleFavorites::setUserId(const std::string &pUserId) noexcept
{
    userId_ = std::make_shared<std::string>(pUserId);
    dirtyFlag_[1] = true;
}
void ArticleFavorites::setUserId(std::string &&pUserId) noexcept
{
    userId_ = std::make_shared<std::string>(std::move(pUserId));
    dirtyFlag_[1] = true;
}



void ArticleFavorites::updateId(const uint64_t id)
{
}
typename ArticleFavorites::PrimaryKeyType ArticleFavorites::getPrimaryKey() const
{
    return std::make_tuple(*articleId_,*userId_);
}

const std::vector<std::string> &ArticleFavorites::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "article_id",
        "user_id"
    };
    return inCols;
}

void ArticleFavorites::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getArticleId())
        {
            binder << getValueOfArticleId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> ArticleFavorites::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(dirtyFlag_);i++)
    {
        if(dirtyFlag_[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void ArticleFavorites::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getArticleId())
        {
            binder << getValueOfArticleId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value ArticleFavorites::toJson() const
{
    Json::Value ret;
    if(getArticleId())
    {
        ret["article_id"]=getValueOfArticleId();
    }
    else
    {
        ret["article_id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    return ret;
}

Json::Value ArticleFavorites::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 2)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getArticleId())
            {
                ret[pMasqueradingVector[0]]=getValueOfArticleId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[1]]=getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getArticleId())
    {
        ret["article_id"]=getValueOfArticleId();
    }
    else
    {
        ret["article_id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    return ret;
}

bool ArticleFavorites::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("article_id"))
    {
        if(!validJsonOfField(0, "article_id", pJson["article_id"], err, true))
            return false;
    }
    else
    {
        err="The article_id column cannot be null";
        return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(1, "user_id", pJson["user_id"], err, true))
            return false;
    }
    else
    {
        err="The user_id column cannot be null";
        return false;
    }
    return true;
}
bool ArticleFavorites::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                          const std::vector<std::string> &pMasqueradingVector,
                                                          std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
    }
    return true;
}
bool ArticleFavorites::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("article_id"))
    {
        if(!validJsonOfField(0, "article_id", pJson["article_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(1, "user_id", pJson["user_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    return true;
}
bool ArticleFavorites::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                        const std::vector<std::string> &pMasqueradingVector,
                                                        std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    return true;
}
bool ArticleFavorites::validJsonOfField(size_t index,
                                        const std::string &fieldName,
                                        const Json::Value &pJson, 
                                        std::string &err, 
                                        bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
